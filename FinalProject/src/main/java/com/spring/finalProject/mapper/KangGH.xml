<?xml version="1.0" encoding="UTF-8"?>

<!-- === mapper 기본 설정 === -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- === 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체 내에서 유일해야 한다.) === -->
<mapper namespace="KangGH">
	
	<!-- === 직원 목록 가져오기(select) 메서드 === -->
	<resultMap type="HashMap" id="empListMap">
		<result property="employeeid"		column="employeeid" 		javaType="String" />
		<result property="fk_departno"		column="fk_departno" 		javaType="String" />
		<result property="departmentname"	column="departmentname" 	javaType="String" />
		<result property="fk_positionno"	column="fk_positionno" 		javaType="String" />
		<result property="positionname"		column="positionname" 		javaType="String" />
		<result property="name"		 		column="name" 				javaType="String" />
		<result property="mobile"		 	column="mobile" 			javaType="String" />
		<result property="email"		 	column="email" 				javaType="String" />
	</resultMap>
	<select id="getEmpList" resultMap="empListMap">
		select employeeid, fk_departno, departmentname, 
			   fk_positionno, positionname, name, mobile, email
		from 
		(
		    select employeeid, fk_departno, departmentname, fk_positionno, 
		    	   name, mobile, email, retire
		    from tbl_employee E
		    JOIN tbl_department D
		    ON E.fk_departno = D.departno
		) V
		JOIN tbl_position P
		ON V.fk_positionno = P.positionno
		where V.retire = 0
		order by fk_positionNo, fk_departno, employeeID asc
	</select>
	
	<!-- 총 게시물 건수(totalCount) -->
	<select id="getTotalCount" parameterType="HashMap" resultType="int">
		select count(*)
		from tbl_employee
	</select>
	
	<!-- === 페이징 처리한 직원 목록 가져오기(검색이 있든지, 검색이 없든지 다 포함된 것) === -->
	<resultMap type="HashMap" id="empPagingListMap">
		<result property="employeeid"		column="employeeid" 		javaType="String" />
		<result property="fk_departno"		column="fk_departno" 		javaType="String" />
		<result property="departmentname"	column="departmentname" 	javaType="String" />
		<result property="fk_positionno"	column="fk_positionno" 		javaType="String" />
		<result property="positionname"		column="positionname" 		javaType="String" />
		<result property="name"		 		column="name" 				javaType="String" />
		<result property="mobile"		 	column="mobile" 			javaType="String" />
		<result property="email"		 	column="email" 				javaType="String" />
	</resultMap>
	<select id="getEmpListWithPaging" parameterType="HashMap" resultMap="empPagingListMap">
		select employeeid, fk_departno, departmentname, 
			   fk_positionno, positionname, name, mobile, email
		from
		(
		    select row_number() over(order by fk_positionNo, fk_departno, employeeID) AS RNO,
		           employeeid, fk_departno, departmentname, 
		           fk_positionno, positionname, name, mobile, email
		    from 
		    (
		        select employeeid, fk_departno, departmentname, fk_positionno, 
		               name, mobile, email, retire
		        from tbl_employee E
		        JOIN tbl_department D
		        ON E.fk_departno = D.departno
		    ) V
		    JOIN tbl_position P
		    ON V.fk_positionno = P.positionno
		    where V.retire = 0
		    <if test='department != ""'>
		    	and departmentname = #{department}
		    </if>
		    <if test='position != ""'>
		    	and positionname = #{position}
		    </if>
		    <if test='searchEmp != ""'>
		    	and name = #{searchEmp}
		    </if>
		)
		where rno between #{startRno} and #{endRno}
		
	</select>
	
	<!-- === 부서목록 가져오기 === -->
	<select id="getDepartmentName" resultType="com.spring.finalProject.model.DepartmentVO_KGH">
		select departno, departmentname
		from tbl_department
		order by departno
	</select>
	
	<!-- === 직급 목록 가져오기 === -->
	<select id="getPosition" resultType="com.spring.finalProject.model.PositionVO_KGH">
		select positionno, positionname
		from tbl_position
		order by positionno
	</select>
	
	<!-- === 검색어 결과 조회하기(select) === -->
	<select id="employeeSearch" parameterType="HashMap" resultType="String">
		select name
		from tbl_employee
		where retire = 0
		and name like '%'|| #{searchEmployee} ||'%'
	</select>
	
	<!-- === 로그인 처리 메서드(select) === -->
	<select id="getLogin" parameterType="HashMap" resultType="com.spring.finalProject.model.EmployeeVO_KGH">
		select employeeid, fk_departNo, fk_positionNo, name, password, mobile, email,
			   hiredate, retiredate, retire, profilename, orgProfilename, fileSize, 
			   salary, dayoff, admin, postcode, address, detailAddress, extraAddress
		from tbl_employee
		where retire = 0
		and email = #{email} 
		and password = #{password}
	</select>
	
	<!-- === 이메일 중복 여부 검사하기(select) === -->
	<select id="emailDuplicateCheck" parameterType="String" resultType="String">
		select email
		from tbl_employee
		where email = #{email}
	</select>
	
	<!-- === 새로 생성될 사원번호 조회하기(select) === -->
	<select id="selectEmpId" parameterType="String" resultType="String">
		select to_char(sysdate, 'yy') || #{departmentno} || employeSeq.nextval AS empID
		from dual
	</select>
	
	<!-- === 직원 정보 등록하기(insert) === -->
	<select id="empRegister" parameterType="com.spring.finalProject.model.EmployeeVO_KGH" resultType="int">
		insert into tbl_employee(employeeId, fk_departNo, fk_positionNo, name, password ,mobile, email, hiredate, retiredate, retire, salary, dayoff, admin, address, detailAddress, extraAddress, postcode)
		values(#{employeeid}, #{fk_departNo}, #{fk_positionNo}, #{name}, #{employeeid}, #{mobile}, #{email}, sysdate, default, 0, #{salary}, 0, 0, #{address}, #{detailAddress}, #{extraAddress}, #{postcode})
	</select>
	
	<!-- === 첨부파일과 함께 직원정보 등록하기(insert) === -->
	<select id="empRegisterWithProfile" parameterType="com.spring.finalProject.model.EmployeeVO_KGH" resultType="int">
		insert into tbl_employee(employeeId, fk_departNo, fk_positionNo, name, password ,mobile, email, hiredate, retiredate, retire, profilename, orgProfilename, fileSize, salary, dayoff, admin, address, detailAddress, extraAddress, postcode)
		values(#{employeeid}, #{fk_departNo}, #{fk_positionNo}, #{name}, #{employeeid}, #{mobile}, #{email}, sysdate, default, 0, #{profilename}, #{orgProfilename}, #{fileSize}, #{salary}, 0, 0, #{address}, #{detailAddress}, #{extraAddress}, #{postcode})
	</select>
	
	<!-- === 특정 회원에 대한 정보 가져오기(select) === -->
	<resultMap type="HashMap" id="empListEditMap">
		<result property="employeeid"		column="employeeid" 		javaType="String" />
		<result property="email"		 	column="email" 				javaType="String" />
		<result property="name"		 		column="name" 				javaType="String" />
		<result property="mobile"		 	column="mobile" 			javaType="String" />
		<result property="departno"			column="departno" 			javaType="String" />
		<result property="departmentname"	column="departmentname" 	javaType="String" />
		<result property="positionno"		column="positionno" 		javaType="String" />
		<result property="positionname"		column="positionname" 		javaType="String" />
		<result property="hiredate"			column="hiredate" 			javaType="String" />
		<result property="salary"			column="salary" 			javaType="String" />
	</resultMap>
	<select id="empListEdit" parameterType="String" resultMap="empListEditMap">
		select employeeid, email, name, mobile, departno, departmentname, 
		       positionno, positionname, hiredate, salary
		from 
		(
		    select employeeid, email, name, mobile, D.departno, d.departmentname, P.positionno, P.positionname, 
		           to_char(hiredate, 'yyyy-mm-dd') AS hiredate, salary
		    from tbl_employee E
		    JOIN tbl_department D
		    ON E.fk_departno = D.departno
		    JOIN tbl_position P
		    ON e.fk_positionno = p.positionno
		)
		where employeeid = #{employeeID}
	</select>
	
	<!-- 직원 정보 수정하기(update) -->
	<update id="empEdit">
		update tbl_employee set name = #{name},
		                        mobile = #{mobile},
		                        fk_departno = #{fk_departNo},
		                        fk_positionno = #{fk_positionNo},
		                        salary = #{salary}
		where employeeid = #{employeeid}
	</update>
</mapper>